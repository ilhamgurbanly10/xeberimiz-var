
// elements-and-values

const characterLimitOfComments = 500;

// the-end-of-elements-and-values



// using-functions

flashPostImgModalCOntainer();

flashUserReflections(characterLimitOfComments);

flashComments({
	toggleComments: true,
	showReplies: false,
	characterLimit: characterLimitOfComments,
	hideOtherReplies: false,
	hideOtherForms: false,
	reverseComments: true
});

// the-end-of-using-functions



// functions



// flash-post-image-modal-container

function flashPostImgModalCOntainer() {

	// elements-and-values
	const con = document.querySelector('.fl-post-img-modal-con');

	// avoiding-errors
	if(con == undefined) return;

	const closer = document.querySelector('.fl-post-img-modal-closer');

	// functions
	function toggle() { 

		this.classList.toggle('fl-show'); 
	}

	// adding-functions
	con.addEventListener('click', toggle);

}

// the-end-of-flash-post-image-modal-container



// flash-user-reflections

function flashUserReflections(characterLimit) {

	// likes-and-dislikes

	// elements-and-values
	const container = document.querySelector('.fl-post-list');
	const likeBtn = container.querySelector('.fl-post-like-btn');
	const dislikeBtn = container.querySelector('.fl-post-dislike-btn');
	const likeNum = container.querySelector('.fl-post-like-num');
	const dislikeNum = container.querySelector('.fl-post-dislike-num');
	const watchNum = container.querySelector('.fl-post-watch-num-num');
	var isLiked;
	var isDisliked;

	if (likeBtn.classList.contains('fl-pressed')) isLiked = true;
	else isLiked = false;

	if (dislikeBtn.classList.contains('fl-pressed')) isDisliked = true;
	else isDisliked = false;

	// add-functions
	likeBtn.addEventListener('click', like);
	dislikeBtn.addEventListener('click', dislike);

	// functions
	function like() {

		if (!isLiked) addLike();
		else removeLike();

		if (isDisliked) removeDislike(); 

	}

	function dislike() {

		if (!isDisliked) addDislike();
		else removeDislike();

		if (isLiked) removeLike();

	}

	function addLike() {
		increaseLikes();
		isLiked = true;
		likeBtn.classList.add('fl-pressed');
	}

	function removeLike() {
		decreaseLikes();
		isLiked = false;
		likeBtn.classList.remove('fl-pressed')
	}

	function addDislike() {
		increaseDislikes();
		isDisliked = true;
		dislikeBtn.classList.add('fl-pressed');
	}

	function removeDislike() {
		decreaseDislikes();
		isDisliked = false;
		dislikeBtn.classList.remove('fl-pressed')
	}

	function increaseLikes() { likeNum.innerHTML = Number(likeNum.innerHTML) + 1; }

	function increaseDislikes() { dislikeNum.innerHTML = Number(dislikeNum.innerHTML) + 1; }

	function decreaseLikes() { likeNum.innerHTML = Number(likeNum.innerHTML) - 1; }

	function decreaseDislikes() { dislikeNum.innerHTML = Number(dislikeNum.innerHTML) - 1; }

	// the-end-of-likes-and-dislikes

	// reply-form

	// getting-elements-and-values
	const commentForm = document.querySelector('.fl-post-comment-form');
	const commentToggler = document.querySelector('.fl-post-comment-toggler'); 
	const commentTextarea = commentForm.querySelector('.fl-post-comment-textarea');
	const commentSubmit = commentForm.querySelector('.fl-post-comment-submit');
	const commentReset = commentForm.querySelector('.fl-post-comment-reset');

	// writing-character-limit-to-html
	const characterLimitShower = document.querySelector('.fl-post-comment-character-limit');
	characterLimitShower.innerHTML = characterLimit;

	// adding-functions
	commentToggler.addEventListener('click', toggle);
	commentTextarea.addEventListener('keyup', check);
	commentReset.addEventListener('click', reset);


	// functions
	function toggle() { commentForm.classList.toggle('fl-show'); commentTextarea.focus(); }

	function check() {

		var charactersLength = flashGetCharactersLength(this, true, true);

		if (charactersLength > characterLimit) { isNotCorrect(); disableSubmit(); }	

		else if (charactersLength == 0) { disableSubmit(); } 

		else { isCorrect(); enableSubmit(); }

	}	

	function reset() { isCorrect(); disableSubmit(); }

	function enableSubmit() { commentSubmit.removeAttribute('disabled'); }

	function disableSubmit() { commentSubmit.setAttribute('disabled',''); }

	function isNotCorrect() { commentForm.classList.add('fl-warning'); }

	function isCorrect() { commentForm.classList.remove('fl-warning'); }
	
	// the-end-of-reply-form

}

// the-end-of-flash-user-reflections



function flashComments(settings = {
	toggleComments: true,
	showReplies: false,
	characterLimit: 1000,
	hideOtherReplies: false,
	hideOtherForms: true,
	reverseComments: false
}) {

	// determining-default-settings
	if (settings.toggleComments == undefined) settings.toggleComments = true;
	if (settings.showReplies == undefined) settings.showReplies = false;
	if (settings.characterLimit == undefined) settings.characterLimit = 1000;
	if (settings.hideOtherReplies == undefined) settings.hideOtherReplies = true;
	if (settings.hideOtherForms == undefined) settings.hideOtherForms = true;
	if (settings.reverseComments == undefined) settings.hideOtherForms = false;


	// likes-and-dislikes

	// getting-elements-and-values
	const con = document.querySelector('.fl-comments-container');
	const myUserId = con.getAttribute('my-user-id'); 
	const comments = con.querySelectorAll('.fl-comments-item');
	const likeButtons = con.querySelectorAll('.fl-comments-like-btn');
	const dislikeButtons = con.querySelectorAll('.fl-comments-dislike-btn');
	const buttonsLength = likeButtons.length;
	const likeNumbers = con.querySelectorAll('.fl-comments-like-num');
	const dislikeNumbers = con.querySelectorAll('.fl-comments-dislike-num');
	var isLiked = [];
	var isDisliked = [];
	const numberOfComments = document.querySelector('.fl-post-comments-num');
	const commentsToggler = document.querySelector('.fl-post-comments-btn');
	const characterLimits = con.querySelectorAll('.fl-comments-reply-character-limit');

	// avoiding-errors
	if (comments[0] == undefined) {

		numberOfComments.innerHTML = "0";
		commentsToggler.setAttribute('disabled','');
		return;

	}

	// writing-character-limit-to-html
	for (var i = 0; i < characterLimits.length; i++) {

		characterLimits[i].innerHTML = settings.characterLimit;

	}

	// using-function
	if (settings.toggleComments) toggleComments();
	
	// giving-number-of-comments-to-page
	numberOfComments.innerHTML = buttonsLength;	

	// add-functions
	for (var i = 0; i < buttonsLength; i++) {

		likeButtons[i].addEventListener('click', like);
		likeButtons[i].setAttribute('index',''+i+'');
		dislikeButtons[i].addEventListener('click', dislike);
		dislikeButtons[i].setAttribute('index',''+i+'');

		if (likeButtons[i].classList.contains('fl-pressed')) isLiked[i] = true;
		else isLiked[i] = false;
		if (dislikeButtons[i].classList.contains('fl-pressed')) isDisliked[i] = true;
		else isDisliked[i] = false;

	}

	// functions
	function like() {

		const x = this.getAttribute('index');

		if (!isLiked[x]) addLike(x);
		else removeLike(x);

		if (isDisliked[x]) removeDislike(x); 

	}

	function dislike() {

		const x = this.getAttribute('index');

		if (!isDisliked[x]) addDislike(x);
		else removeDislike(x);

		if (isLiked[x]) removeLike(x);

	}

	function addLike(x) {
		increaseLikes(x);
		isLiked[x] = true;
		likeButtons[x].classList.add('fl-pressed');
	}

	function removeLike(x) {
		decreaseLikes(x);
		isLiked[x] = false;
		likeButtons[x].classList.remove('fl-pressed')
	}

	function addDislike(x) {
		increaseDislikes(x);
		isDisliked[x] = true;
		dislikeButtons[x].classList.add('fl-pressed');
	}

	function removeDislike(x) {
		decreaseDislikes(x);
		isDisliked[x] = false;
		dislikeButtons[x].classList.remove('fl-pressed')
	}


	function increaseLikes(y) {
		likeNumbers[y].innerHTML = Number(likeNumbers[y].innerHTML) + 1;
	}

	function increaseDislikes(y) {
		dislikeNumbers[y].innerHTML = Number(dislikeNumbers[y].innerHTML) + 1;
	}

	function decreaseLikes(y) {
		likeNumbers[y].innerHTML = Number(likeNumbers[y].innerHTML) - 1;
	}

	function decreaseDislikes(y) {
		dislikeNumbers[y].innerHTML = Number(dislikeNumbers[y].innerHTML) - 1;
	}

	// the-end-of-likes-and-dislikes


	// delete-comments

	var deleteCommentButtons = con.querySelectorAll('.fl-comments-delete-btn');

	// loop
	for (var i = 0, commentsUserId = []; i < comments.length; i++) {
		
		deleteCommentButtons[i].setAttribute('index',''+i+'');
		deleteCommentButtons[i].addEventListener('click', deleteComment);

		commentsUserId[i] = comments[i].getAttribute('user-id');

		if (commentsUserId[i] == myUserId) showDeleteButton(i);

	}

	// functions
	function deleteComment() {

		const x = this.getAttribute('index');
		comments[x].style.display = "none";
		increaseNumberOfComments();

		if (x == 0) comments[1].style.marginTop = "0";

	}

	function showDeleteButton(y) {
		deleteCommentButtons[y].classList.remove('fl-hide');
	}

	function increaseNumberOfComments() {
		numberOfComments.innerHTML = Number(numberOfComments.innerHTML - 1);
	}

	// the-end-of-delete-comments


	// replies

	// getting-elements-and-values
	const replyContainers = con.querySelectorAll('.fl-replies-list');
	const replyButtons = con.querySelectorAll('.fl-comments-replies-btn');
	const numberOfReplies = con.querySelectorAll('.fl-comments-replies-num');

	// giving-reply-numbers-to-comments
	for (var i = 0, numbers = []; i < numberOfReplies.length; i++) {

		const repliesPerComment = replyContainers[i].querySelectorAll('.fl-replies-item');

		if (repliesPerComment[0] == undefined) {

			numberOfReplies[i].innerHTML = "0";
			disableReplyButton(i);

		} 	else numberOfReplies[i].innerHTML = repliesPerComment.length;

	}

	// adding-functions
	for (var i = 0; i < replyButtons.length; i++) {

		replyButtons[i].addEventListener('click', toggleReplies);
		replyButtons[i].setAttribute('index',''+i+'');

	}

	// functions
	function toggleReplies() {

		const x = this.getAttribute('index');

		replyContainers[x].classList.toggle('fl-show');

		if (settings.hideOtherReplies) hideOtherReplies(x);
	
	}

	function showReplies() {

		for (var i = 0; i < replyContainers.length; i++) {
			replyContainers[i].classList.add('fl-show')
		}
	
	}

	if (settings.showReplies) showReplies();

	function hideOtherReplies(y) {

		for (var i = 0; i < replyContainers.length; i++) {

			if (i == y) continue;
			replyContainers[i].classList.remove('fl-show');

		}

	}

	function disableReplyButton(y) {
		replyButtons[y].setAttribute('disabled', '');
	}
	
	// the-end-of-replies


	// reply-form

	// getting-elements-and-values
	const replyForms = con.querySelectorAll('.fl-comments-reply-form');
	const replyFormButtons = con.querySelectorAll('.fl-comments-toggler');

	// adding-functions
	for (var i = 0; i < replyFormButtons.length; i++) {

		replyFormButtons[i].addEventListener('click', toggleReplyForm);
		replyFormButtons[i].setAttribute('index',''+i+'');

		replyForms[i].querySelector('.fl-comments-reply-textarea').addEventListener('keyup', checkForm);
		replyForms[i].querySelector('.fl-comments-reply-textarea').setAttribute('index',''+i+'');
		replyForms[i].querySelector('.fl-comments-reply-reset').addEventListener('click', resetForm);
		replyForms[i].querySelector('.fl-comments-reply-reset').setAttribute('index',''+i+'');
	}

	// functions
	function toggleReplyForm() {

		const x = this.getAttribute('index');

		replyForms[x].classList.toggle('fl-show');

		if (settings.hideOtherForms) hideOtherReplyForms(x);
	
	}

	function hideOtherReplyForms(y) {

		for (var i = 0; i < replyFormButtons.length; i++) {

			if (i == y) continue;
			replyForms[i].classList.remove('fl-show');

		}

	}

	function checkForm() {

		const x = this.getAttribute('index');

		const characters = flashGetCharactersLength(this, true, true);

		if (characters > settings.characterLimit) {

			isNotCorrect(x);
			disableSubmit(x);

		}	else if (characters == 0) {

			disableSubmit(x);

		} else {

			isCorrect(x);
			enableSubmit(x);
			
		}

	}	

	function resetForm() {

		const x = this.getAttribute('index');
		isCorrect(x);
		disableSubmit(x);

	}

	function enableSubmit(y) {
		replyForms[y].querySelector('.fl-comments-reply-submit').removeAttribute('disabled');
	}

	function disableSubmit(y) {
		replyForms[y].querySelector('.fl-comments-reply-submit').setAttribute('disabled','');
	}

	function isNotCorrect(y) {
		replyForms[y].classList.add('fl-warning');
	}

	function isCorrect(y) {
		replyForms[y].classList.remove('fl-warning');
	}
	// the-end-of-reply-form

	// likes-and-dislikes-of-replies
	
	// getting-elements-and-values
	const replyLikeButtons = con.querySelectorAll('.fl-replies-like-btn');
	const replyDislikeButtons = con.querySelectorAll('.fl-replies-dislike-btn');
	const replyButtonsLength = replyLikeButtons.length;
	const replyLikeNumbers = con.querySelectorAll('.fl-replies-like-num');
	const replyDislikeNumbers = con.querySelectorAll('.fl-replies-dislike-num');
	var replyIsLiked = [];
	var replyIsDisliked = [];
		
	// add-functions
	for (var i = 0; i < replyButtonsLength; i++) {

		replyLikeButtons[i].addEventListener('click', likeReply);
		replyLikeButtons[i].setAttribute('index',''+i+'');
		replyDislikeButtons[i].addEventListener('click', dislikeReply);
		replyDislikeButtons[i].setAttribute('index',''+i+'');

		if (replyLikeButtons[i].classList.contains('fl-pressed')) replyIsLiked[i] = true;
		else replyIsLiked[i] = false;
		if (replyDislikeButtons[i].classList.contains('fl-pressed')) replyIsDisliked[i] = true;
		else replyIsDisliked[i] = false;

	}

	// functions

	function likeReply() {

		const x = this.getAttribute('index');

		if (!replyIsLiked[x]) addLikeToReply(x);
		else removeLikeFromReply(x);

		if (replyIsDisliked[x]) removeDislikeFromReply(x); 

	}

	function dislikeReply() {

		const x = this.getAttribute('index');

		if (!replyIsDisliked[x]) addDislikeToReply(x);
		else removeDislikeFromReply(x);

		if (replyIsLiked[x]) removeLikeFromReply(x);

	}

	function addLikeToReply(x) {
		increaseReplyLikes(x);
		replyIsLiked[x] = true;
		replyLikeButtons[x].classList.add('fl-pressed');
	}

	function removeLikeFromReply(x) {
		decreaseReplyLikes(x);
		replyIsLiked[x] = false;
		replyLikeButtons[x].classList.remove('fl-pressed')
	}

	function addDislikeToReply(x) {
		increaseReplyDislikes(x);
		replyIsDisliked[x] = true;
		replyDislikeButtons[x].classList.add('fl-pressed');
	}

	function removeDislikeFromReply(x) {
		decreaseReplyDislikes(x);
		replyIsDisliked[x] = false;
		replyDislikeButtons[x].classList.remove('fl-pressed')
	}

	function increaseReplyLikes(y) {
		replyLikeNumbers[y].innerHTML = Number(replyLikeNumbers[y].innerHTML) + 1;
	}

	function increaseReplyDislikes(y) {
		replyDislikeNumbers[y].innerHTML = Number(replyDislikeNumbers[y].innerHTML) + 1;
	}

	function decreaseReplyLikes(y) {
		replyLikeNumbers[y].innerHTML = Number(replyLikeNumbers[y].innerHTML) - 1;
	}

	function decreaseReplyDislikes(y) {
		replyDislikeNumbers[y].innerHTML = Number(replyDislikeNumbers[y].innerHTML) - 1;
	}
	// the-end-of-likes-and-dislikes-of-replies

	/// delete-replies
	const deleteReplyButtons = con.querySelectorAll('.fl-replies-delete-btn');
	const replies = con.querySelectorAll('.fl-replies-item');
	// loop
	for (var i = 0, repliesUserId = []; i < deleteReplyButtons.length; i++) {
		
		deleteReplyButtons[i].setAttribute('index',''+i+'');
		deleteReplyButtons[i].addEventListener('click', deleteReply);

		repliesUserId[i] = replies[i].getAttribute('user-id');

		if (repliesUserId[i] == myUserId) showReplyDeleteButton(i);

	}

	// giving-parent-index-to-reply-delete-buttons
	// !it is necesary to increase number of replies
	for (var i = 0; i < comments.length; i++) {
		
		const deleteReplyButtonsPerComment = comments[i].querySelectorAll('.fl-replies-delete-btn');

		for (var x = 0; x < deleteReplyButtonsPerComment.length; x++) {

			deleteReplyButtonsPerComment[x].setAttribute('parent-index',''+i+'');
		}

	}

	// functions
	function deleteReply() {

		const x = this.getAttribute('index');
		const z = this.getAttribute('parent-index');
		replies[x].style.display = "none";
		decreaseNumberOfReplyComments(z);

	}

	function showReplyDeleteButton(y) {
		deleteReplyButtons[y].classList.remove('fl-hide');
	}

	function decreaseNumberOfReplyComments(y) {

		const number = comments[y].querySelector('.fl-comments-replies-num');
		const button = comments[y].querySelector('.fl-comments-replies-btn');

		number.innerHTML = Number(number.innerHTML) - 1;

		if (number.innerHTML == 0) button.setAttribute('disabled','');

	}

	// the-end-of-delete-replies

	function toggleComments() {

		// elements-and-values
		const btn = document.querySelector('.fl-post-comments-btn');
		const con = document.querySelector('.fl-comments-container');

		// avoiding-errors
		if (btn == undefined) return;
		
		// adding-functions
		btn.addEventListener('click', toggle);

		// functions
		function toggle() { con.classList.toggle('fl-show'); }

	}

	// reverse

	if (settings.reverseComments) { 

		const reverseBtn = document.querySelector('.fl-comments-reverse-btn');
		const reverseBtnText = reverseBtn.innerText;
		const commentsList = con.querySelector('.fl-comments-list');

		reverseBtn.addEventListener('click', reverseComments);

		function reverseComments() {

			commentsList.classList.toggle('fl-reversed');

			if (commentsList.classList.contains('fl-reversed')) 
				reverseBtn.innerText = reverseBtn.getAttribute('data-text');
			else 
				reverseBtn.innerText = reverseBtnText;
		}

	}

	// the-end-of-reverse



}

// the-end-of-comments


// the-end-of-functions